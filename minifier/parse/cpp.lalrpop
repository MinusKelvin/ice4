use super::*;

grammar;

pub File = TopLevel*;

TopLevel: TopLevel = {
    DeclareOrFunction => match <> {
        Ok(d) => TopLevel::Declaration(d),
        Err(f) => TopLevel::Function(f),
    },
    "using" "namespace" <Identifier> ";" => TopLevel::Using(<>),
    "struct" <Identifier> "{" <MemberDeclaration*> "}" <Comma<DeclExpr>> ";" => TopLevel::Struct(<>),
    "typedef" <BaseType> <DeclForm> ";" => TopLevel::TypeDef(<>),
};

///////////////////////////////////////////////////////////////////////////////
//
// Expressions
//
///////////////////////////////////////////////////////////////////////////////

CommaExpression = {
    <CommaExpression> "," <Expression> => Box::new(Expr::Comma(<>)),
    Expression
};

Expression = AssignmentExpr;

AssignmentExpr = {
    <LogicalOrExpr> "=" <AssignmentExpr> => Box::new(Expr::Assign(<>)),
    <LogicalOrExpr> "*=" <AssignmentExpr> => Box::new(Expr::MulAssign(<>)),
    <LogicalOrExpr> "/=" <AssignmentExpr> => Box::new(Expr::DivAssign(<>)),
    <LogicalOrExpr> "%=" <AssignmentExpr> => Box::new(Expr::ModAssign(<>)),
    <LogicalOrExpr> "+=" <AssignmentExpr> => Box::new(Expr::AddAssign(<>)),
    <LogicalOrExpr> "-=" <AssignmentExpr> => Box::new(Expr::SubAssign(<>)),
    <LogicalOrExpr> "<<=" <AssignmentExpr> => Box::new(Expr::LeftShiftAssign(<>)),
    <LogicalOrExpr> ">>=" <AssignmentExpr> => Box::new(Expr::RightShiftAssign(<>)),
    <LogicalOrExpr> "|=" <AssignmentExpr> => Box::new(Expr::OrAssign(<>)),
    <LogicalOrExpr> "&=" <AssignmentExpr> => Box::new(Expr::AndAssign(<>)),
    <LogicalOrExpr> "^=" <AssignmentExpr> => Box::new(Expr::XorAssign(<>)),
    <LogicalOrExpr> "?" <CommaExpression> ":" <AssignmentExpr> => Box::new(Expr::Ternary(<>)),
    "throw" <LogicalOrExpr> => Box::new(Expr::Throw(<>)),
    LogicalOrExpr,
};

LogicalOrExpr = {
    <LogicalOrExpr> "||" <LogicalAndExpr> => Box::new(Expr::LogicalOr(<>)),
    LogicalAndExpr
};

LogicalAndExpr = {
    <LogicalAndExpr> "&&" <BitOrExpr> => Box::new(Expr::LogicalAnd(<>)),
    BitOrExpr
};

BitOrExpr = {
    <BitOrExpr> "|" <BitXorExpr> => Box::new(Expr::BitOr(<>)),
    BitXorExpr
};

BitXorExpr = {
    <BitXorExpr> "^" <BitAndExpr> => Box::new(Expr::BitXor(<>)),
    BitAndExpr
};

BitAndExpr = {
    <BitAndExpr> "&" <EqualityExpr> => Box::new(Expr::BitAnd(<>)),
    EqualityExpr
};

EqualityExpr = {
    <EqualityExpr> "==" <CompareExpr> => Box::new(Expr::Equals(<>)),
    <EqualityExpr> "!=" <CompareExpr> => Box::new(Expr::NotEquals(<>)),
    CompareExpr
};

CompareExpr = {
    <CompareExpr> "<" <BitShiftExpr> => Box::new(Expr::Less(<>)),
    <CompareExpr> "<=" <BitShiftExpr> => Box::new(Expr::LessEquals(<>)),
    <CompareExpr> ">" <BitShiftExpr> => Box::new(Expr::Greater(<>)),
    <CompareExpr> ">=" <BitShiftExpr> => Box::new(Expr::GreaterEquals(<>)),
    BitShiftExpr
};

BitShiftExpr = {
    <BitShiftExpr> "<<" <AddExpr> => Box::new(Expr::ShiftLeft(<>)),
    <BitShiftExpr> ">>" <AddExpr> => Box::new(Expr::ShiftRight(<>)),
    AddExpr
};

AddExpr = {
    <AddExpr> "+" <MulExpr> => Box::new(Expr::Add(<>)),
    <AddExpr> "-" <MulExpr> => Box::new(Expr::Sub(<>)),
    MulExpr
};

MulExpr = {
    <MulExpr> "*" <PrefixExpr> => Box::new(Expr::Mul(<>)),
    <MulExpr> "/" <PrefixExpr> => Box::new(Expr::Div(<>)),
    <MulExpr> "%" <PrefixExpr> => Box::new(Expr::Mod(<>)),
    PrefixExpr
};

PrefixExpr = {
    PrefixExprNoParen,
    "(" <ModifiedType> ")" <PrefixExpr> => Box::new(Expr::Cast(<>)),
}

PrefixExprNoParen = {
    "*" <PrefixExpr> => Box::new(Expr::Deref(<>)),
    "&" <PrefixExpr> => Box::new(Expr::AddressOf(<>)),
    "+" <PrefixExpr> => Box::new(Expr::UnaryPlus(<>)),
    "-" <PrefixExpr> => Box::new(Expr::Negate(<>)),
    "!" <PrefixExpr> => Box::new(Expr::Not(<>)),
    "~" <PrefixExpr> => Box::new(Expr::Complement(<>)),
    "++" <PrefixExpr> => Box::new(Expr::PreIncrement(<>)),
    "--" <PrefixExpr> => Box::new(Expr::PreDecrement(<>)),
    "sizeof" <PrefixExprNoParen> => Box::new(Expr::SizeOf(<>)),
    "sizeof" "(" <ModifiedType> ")" => Box::new(Expr::SizeOfType(<>)),
    PostfixExpr,
};

PostfixExpr = {
    <PostfixExpr> "[" <CommaExpression> "]" => Box::new(Expr::Index(<>)),
    <PostfixExpr> "(" <Comma<Expression>> ")" => Box::new(Expr::Call(<>)),
    <PostfixExpr> "." <Identifier> => Box::new(Expr::MemberAccess(<>)),
    <PostfixExpr> "->" <Identifier> => Box::new(Expr::PointerMemberAccess(<>)),
    <PostfixExpr> "++" => Box::new(Expr::PostIncrement(<>)),
    <PostfixExpr> "--" => Box::new(Expr::PostDecrement(<>)),
    <BaseType> "(" <Comma<Expression>> ")" => Box::new(Expr::Construct(<>)),
    <BaseType> "{" <Comma<Expression>> "}" => Box::new(Expr::BraceConstruct(<>)),
    Atom,
};

Atom: Expression = {
    Identifier => Box::new(Expr::Ident(<>)),
    Number => Box::new(Expr::Number(<>)),
    String+ => Box::new(Expr::String(string_concat(<>))),
    "this" => Box::new(Expr::Ident("this".to_owned())),
    "[" <Comma<Identifier>> "]" "(" <Comma<Argument>> ")" "{" <Statement*> "}" => Box::new(Expr::Lambda(<>)),
    "(" <CommaExpression> ")",
};

///////////////////////////////////////////////////////////////////////////////
//
// Statements
//
///////////////////////////////////////////////////////////////////////////////

Statement: Statement = {
    <Declaration> ";" => Statement::Declaration(<>),
    <CommaExpression> ";" => Statement::Expression(<>),
    "case" <CommaExpression> ":" => Statement::Case(<>),
    "default" ":" => Statement::Default,
    "try" "{" <Statement*> "}" "catch" "(" "..." ")" "{" "}" => Statement::Try(<>),
    "for" "(" <Declaration?> ";" <CommaExpression?> ";" <CommaExpression?> ")" "{" <Statement*> "}" => {
        Statement::For(<>)
    },
    "for" "(" <d:Argument> ":" <v:CommaExpression> ")" "{" <s:Statement*> "}" => {
        Statement::ForEach(d, Ok(v), s)
    },
    "for" "(" <d:Argument> ":" "{" <v:Comma<Expression>> "}" ")" "{" <s:Statement*> "}" => {
        Statement::ForEach(d, Err(v), s)
    },
    If,
    "switch" "(" <CommaExpression> ")" "{" <Statement*> "}" => Statement::Switch(<>),
    "while" "(" <CommaExpression> ")" "{" <Statement*> "}" => Statement::While(<>),
    "return" <CommaExpression?> ";" => Statement::Return(<>),
    "continue" ";" => Statement::Continue,
    "break" ";" => Statement::Break,
};

If: Statement = {
    "if" "(" <CommaExpression> ")" "{" <Statement*> "}" => {
        Statement::If(<>, vec![])
    },
    "if" "(" <CommaExpression> ")" "{" <Statement*> "}" "else" "{" <Statement*> "}" => {
        Statement::If(<>)
    },
    "if" "(" <c:CommaExpression> ")" "{" <t:Statement*> "}" "else" <f:If> => {
        Statement::If(c, t, vec![f])
    },
}

///////////////////////////////////////////////////////////////////////////////
//
// Declarations
//
///////////////////////////////////////////////////////////////////////////////

MemberDeclaration: MemberItem = {
    DeclareOrFunction => match <> {
        Ok(d) => MemberItem::Field(d),
        Err(f) => MemberItem::Method(f),
    },
    <t:Typename> "(" <a:Comma<Argument>> ")" <i:(":" <Comma<MemberInit>>)?> "{" <s:Statement*> "}" => {
        MemberItem::Constructor(t, a, i.unwrap_or_default(), s)
    },
    <t:Typename> "(" ")" "=" "default" ";" => {
        MemberItem::DefaultedConstructor(<>)
    }
};

MemberInit: (String, Initializer) = {
    <i:Identifier> "(" <t:Comma<Expression>> ")" => (i, Initializer::Call(t)),
    <i:Identifier> "{" <t:Comma<Expression>> "}" => (i, Initializer::Brace(t)),
};

DeclareOrFunction: Result<Declaration, Function> = {
    <t:BaseType> <e:Comma<DeclExpr>> ";" => {
        Ok(Declaration {
            base_type: t,
            declarations: e,
        })
    },
    <t:BaseType> <f:DeclForm> ":" <b:Number> ";" => Ok(Declaration {
        base_type: t,
        declarations: vec![DeclExpr {
            form: DeclForm::BitField(Box::new(f), b),
            init: Initializer::Default,
        }]
    }),
    <t:BaseType> <f:DeclForm> "(" ")" "{" <s:Statement*> "}" => Err(Function {
        base_type: t,
        decl_form: f,
        args: vec![],
        body: s,
    }),
    <t:BaseType> <f:DeclForm> "(" <mut a:(<Argument> ",")*> <l:Argument> ")" "{" <s:Statement*> "}" => {
        a.push(l);
        Err(Function {
            base_type: t,
            decl_form: f,
            args: a,
            body: s,
        })
    }
};

Declaration: Declaration = {
    <t:BaseType> <e:Comma<DeclExpr>> => {
        Declaration {
            base_type: t,
            declarations: e,
        }
    },
};

DeclExpr: DeclExpr = {
    <form:DeclForm> => DeclExpr { form, init: Initializer::Default },
    <form:DeclForm> "(" ")" => DeclExpr { form, init: Initializer::Call(vec![]) },
    <form:DeclForm> "(" <mut args:(<Expression> ",")*> <l:Expression> ")" => {
        args.push(l);
        DeclExpr { form, init: Initializer::Call(args) }
    },
    <form:DeclForm> "{" <i:Comma<Expression>> "}" => DeclExpr { form, init: Initializer::Brace(i) },
    <form:DeclForm> "=" <i:Expression> => DeclExpr { form, init: Initializer::Equal(i) },
    <form:DeclForm> "=" "{" <v:Comma<ArrayInit>> "}" => DeclExpr {
        form,
        init: Initializer::Array(v),
    },
};

ArrayInit: ArrayInit = {
    Expression => ArrayInit::Expr(<>),
    "{" <Comma<ArrayInit>> "}" => ArrayInit::SubArray(<>),
};

DeclForm = DeclForm1;

DeclForm1: DeclForm = {
    <f:DeclForm1> "[" <s:Number?> "]" => DeclForm::Array(Box::new(f), s),
    DeclForm2
};

DeclForm2: DeclForm = {
    "*" <DeclForm2> => DeclForm::Pointer(Box::new(<>)),
    "&" <DeclForm2> => DeclForm::LReference(Box::new(<>)),
    "&&" <DeclForm2> => DeclForm::RReference(Box::new(<>)),
    Identifier => DeclForm::Name(<>),
    "operator" "==" => DeclForm::OpEquals,
};

Argument = BaseType DeclExpr;

BaseType: BaseType = {
    "const" <core:CoreType> => BaseType {
        core,
        const_: true,
        template_parameters: None,
    },
    CoreType => BaseType {
        core: <>,
        const_: false,
        template_parameters: None,
    },
    <core:CoreType> "<" <t:Comma<BaseType>> ">" => BaseType {
        core,
        const_: false,
        template_parameters: Some(t),
    },
};

CoreType: CoreType = {
    "signed"? "char" => CoreType::SignedChar,
    "signed"? "short" => CoreType::SignedShort,
    "signed"? "int" => CoreType::SignedInt,
    "signed"? "long" => CoreType::SignedLong,
    "unsigned" "char" => CoreType::UnsignedChar,
    "unsigned" "short" => CoreType::UnsignedShort,
    "unsigned" "int" => CoreType::UnsignedInt,
    "unsigned" "long" => CoreType::UnsignedLong,
    "float" => CoreType::Float,
    "double" => CoreType::Double,
    "void" => CoreType::Void,
    "auto" => CoreType::Auto,
    Typename => CoreType::User(<>),
};

ModifiedType: ModifiedType = {
    <ModifiedType> "*" => ModifiedType::Pointer(Box::new(<>)),
    <ModifiedType> "&" => ModifiedType::LReference(Box::new(<>)),
    <ModifiedType> "&&" => ModifiedType::RReference(Box::new(<>)),
    BaseType => ModifiedType::Base(<>),
};

///////////////////////////////////////////////////////////////////////////////
//
// Utilities
//
///////////////////////////////////////////////////////////////////////////////

#[inline]
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    },
};

Identifier: String = RawIdentifier => match <> { Token::Identifier(s) => s, _ => unreachable!() };
Typename: String = RawTypename => match <> { Token::Typename(s) => s, _ => unreachable!() };
String: PrefixString = RawString => match <> { Token::String(s) => s, _ => unreachable!() };
Number: Result<ParsedNumber, String> = {
    RawInteger => match <> { Token::Integer(n) => Ok(n), _ => unreachable!() },
    RawOtherNumber => match <> { Token::OtherNumber(s) => Err(s), _ => unreachable!() },
};

extern {
    type Location = usize;
    type Error = ();

    enum Token {
        RawString => Token::String(_),
        RawIdentifier => Token::Identifier(_),
        RawTypename => Token::Typename(_),
        RawInteger => Token::Integer(_),
        RawOtherNumber => Token::OtherNumber(_),
        "&" => Token::Ampersand,
        "&&" => Token::AmpersandAmpersand,
        "&=" => Token::AmpersandEqual,
        "!" => Token::Bang,
        "!=" => Token::BangEqual,
        "|" => Token::Bar,
        "||" => Token::BarBar,
        "|=" => Token::BarEqual,
        "^" => Token::Caret,
        "^=" => Token::CaretEqual,
        ":" => Token::Colon,
        "::" => Token::ColonColon,
        "," => Token::Comma,
        "." => Token::Dot,
        "..." => Token::DotDotDot,
        "=" => Token::Equal,
        "==" => Token::EqualEqual,
        ">" => Token::Greater,
        ">=" => Token::GreaterEqual,
        ">>" => Token::GreaterGreater,
        ">>=" => Token::GreaterGreaterEqual,
        "{" => Token::LeftBrace,
        "[" => Token::LeftBracket,
        "(" => Token::LeftParen,
        "<" => Token::Less,
        "<=" => Token::LessEqual,
        "<<" => Token::LessLess,
        "<<=" => Token::LessLessEqual,
        "-" => Token::Minus,
        "-=" => Token::MinusEqual,
        "->" => Token::MinusGreater,
        "--" => Token::MinusMinus,
        "%" => Token::Percent,
        "%=" => Token::PercentEqual,
        "+" => Token::Plus,
        "+=" => Token::PlusEqual,
        "++" => Token::PlusPlus,
        "?" => Token::Question,
        "}" => Token::RightBrace,
        "]" => Token::RightBracket,
        ")" => Token::RightParen,
        ";" => Token::Semicolon,
        "/" => Token::Slash,
        "/=" => Token::SlashEqual,
        "*" => Token::Star,
        "*=" => Token::StarEqual,
        "~" => Token::Tilde,
        "alignas" => Token::Keyword("alignas"),
        "alignof" => Token::Keyword("alignof"),
        "and" => Token::Keyword("and"),
        "and_eq" => Token::Keyword("and_eq"),
        "asm" => Token::Keyword("asm"),
        "auto" => Token::Keyword("auto"),
        "bitand" => Token::Keyword("bitand"),
        "bitor" => Token::Keyword("bitor"),
        "bool" => Token::Keyword("bool"),
        "break" => Token::Keyword("break"),
        "case" => Token::Keyword("case"),
        "catch" => Token::Keyword("catch"),
        "char" => Token::Keyword("char"),
        "class" => Token::Keyword("class"),
        "compl" => Token::Keyword("compl"),
        "const" => Token::Keyword("const"),
        "const_cast" => Token::Keyword("const_cast"),
        "constexpr" => Token::Keyword("constexpr"),
        "continue" => Token::Keyword("continue"),
        "decltype" => Token::Keyword("decltype"),
        "default" => Token::Keyword("default"),
        "delete" => Token::Keyword("delete"),
        "do" => Token::Keyword("do"),
        "double" => Token::Keyword("double"),
        "dynamic_cast" => Token::Keyword("dynamic_cast"),
        "else" => Token::Keyword("else"),
        "enum" => Token::Keyword("enum"),
        "explicit" => Token::Keyword("explicit"),
        "export" => Token::Keyword("export"),
        "extern" => Token::Keyword("extern"),
        "false" => Token::Keyword("false"),
        "float" => Token::Keyword("float"),
        "for" => Token::Keyword("for"),
        "friend" => Token::Keyword("friend"),
        "goto" => Token::Keyword("goto"),
        "if" => Token::Keyword("if"),
        "inline" => Token::Keyword("inline"),
        "int" => Token::Keyword("int"),
        "long" => Token::Keyword("long"),
        "mutable" => Token::Keyword("mutable"),
        "namespace" => Token::Keyword("namespace"),
        "new" => Token::Keyword("new"),
        "noexcept" => Token::Keyword("noexcept"),
        "not" => Token::Keyword("not"),
        "not_eq" => Token::Keyword("not_eq"),
        "nullptr" => Token::Keyword("nullptr"),
        "operator" => Token::Keyword("operator"),
        "or" => Token::Keyword("or"),
        "or_eq" => Token::Keyword("or_eq"),
        "private" => Token::Keyword("private"),
        "protected" => Token::Keyword("protected"),
        "public" => Token::Keyword("public"),
        "register" => Token::Keyword("register"),
        "reinterpret_cast" => Token::Keyword("reinterpret_cast"),
        "return" => Token::Keyword("return"),
        "short" => Token::Keyword("short"),
        "signed" => Token::Keyword("signed"),
        "sizeof" => Token::Keyword("sizeof"),
        "static" => Token::Keyword("static"),
        "static_assert" => Token::Keyword("static_assert"),
        "static_cast" => Token::Keyword("static_cast"),
        "struct" => Token::Keyword("struct"),
        "switch" => Token::Keyword("switch"),
        "template" => Token::Keyword("template"),
        "this" => Token::Keyword("this"),
        "thread_local" => Token::Keyword("thread_local"),
        "throw" => Token::Keyword("throw"),
        "true" => Token::Keyword("true"),
        "try" => Token::Keyword("try"),
        "typedef" => Token::Keyword("typedef"),
        "typeid" => Token::Keyword("typeid"),
        "typename" => Token::Keyword("typename"),
        "union" => Token::Keyword("union"),
        "unsigned" => Token::Keyword("unsigned"),
        "using" => Token::Keyword("using"),
        "virtual" => Token::Keyword("virtual"),
        "void" => Token::Keyword("void"),
        "volatile" => Token::Keyword("volatile"),
        "wchar_t" => Token::Keyword("wchar_t"),
        "while" => Token::Keyword("while"),
        "xor" => Token::Keyword("xor"),
        "xor_eq" => Token::Keyword("xor_eq"),
    }
}
